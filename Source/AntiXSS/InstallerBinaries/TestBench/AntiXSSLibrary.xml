<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AntiXSSLibrary</name>
    </assembly>
    <members>
        <member name="T:Microsoft.InformationSecurity.CISF.AntiXss">
            ---------------------------------------------------------------------
             <summary>
                 Performs encoding of input strings to provide protection against
                 Cross-Site Scripting (XSS) attacks in various contextes.
             </summary>
             <remarks>
                 The Anti-Cross Site Scripting Library utilizes the Principle 
                 of Inclusions, sometimes referred to as <i>white-listing</i> to 
                 provide protection against Cross-Site Scripting attacks.  With
                 white-listing protection algorithms looks for valid inputs and 
                 automatically treats everything outside that set as a 
                 potential attack.  This library can be used as a defense in
                 depth approach with other mitigation techniques and is suitable
                 for applications with high security requirements.
             </remarks>
            ---------------------------------------------------------------------
            
        </member>
        <member name="F:Microsoft.InformationSecurity.CISF.AntiXss.EmptyStringVBS">
            ---------------------------------------------------------------------
             <summary>
                 Empty string for Visual Basic Script contextes
             </summary>
            ---------------------------------------------------------------------
        </member>
        <member name="F:Microsoft.InformationSecurity.CISF.AntiXss.EmptyStringJavaScript">
            ---------------------------------------------------------------------
             <summary>
                 Empty string for Java Script contextes
             </summary>
            ---------------------------------------------------------------------
        </member>
        <member name="F:Microsoft.InformationSecurity.CISF.AntiXss.WhitelistCodes">
            <summary>
            Initializes character Html encoding array
            </summary>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetSafeHtml(System.String)">
            <summary>
            Get safe version of HTML page.This will return a full html document as string.
            </summary>
            <param name="input">String containing user supplied HTML</param>
            <returns>Safe version of user input</returns>
            <remarks>Input string is passed through HtmlToHtml class to strip out
            any unsafe HTML it might contain.</remarks>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetSafeHtmlFragment(System.String)">
            <summary>
            Get safe version of HTML fragment as string.
            </summary>
            <param name="input">String containing user supplied HTML</param>
            <returns>Safe version of user input</returns>
            <remarks>Input string is passed through HtmlToHtml class to strip out
            any unsafe HTML it might contain.</remarks>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetSafeHtml(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Get safe version of HTML.
            </summary>
            <param name="sourceReader"> TextReader as source of HTML</param>
            <param name="destinationWriter">TextWriter as safeHTML</param>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetSafeHtml(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Get safe version of HTML.
            </summary>
            <param name="sourceReader"> TextReader as source of HTML</param>
            <param name="destinationStream">Stream as safeHTML</param>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetSafeHtml(System.IO.Stream,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Get safe version of HTML.
            </summary>
            <param name="sourceStream"> Stream as source of HTML</param>
            <param name="destinationStream">Stream as safeHTML</param>
            <param name="inputEncoding">Encoding type of the source stream</param>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetSafeHtmlFragment(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Get safe version of HTML fragment.
            </summary>
            <param name="sourceReader"> TextReader as source of HTML</param>
            <param name="destinationWriter">TextWriter as safeHTML</param>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetSafeHtmlFragment(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Get safe version of HTML fragment.
            </summary>
            <param name="sourceReader"> TextReader as source of HTML</param>
            <param name="destinationStream">Stream as safeHTML</param>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetSafeHtmlFragment(System.IO.Stream,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Get safe version of HTML Fragment.
            </summary>
            <param name="sourceStream"> Stream as source of HTML</param>
            <param name="destinationStream">Stream as safeHTML</param>
            <param name="inputEncoding">Encoding type of the source stream</param>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetNormalizedHtml(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
             Get the normalized version of html. This will collapse white space, balance tags, and fix other problems in the source HTML.
            </summary>
            <param name="sourceReader"> TextReader as source of HTML</param>
            <param name="destinationWriter">TextWriter as Normalized HTML</param>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetNormalizedHtml(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Get the normalized version of html. This will collapse white space, balance tags, and fix other problems in the source HTML.
            </summary>
            <param name="sourceReader"> TextReader as source of HTML</param>
            <param name="destinationStream">Stream as Normalized HTML</param>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.GetNormalizedHtml(System.IO.Stream,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Get the normalized version of html. This will collapse white space, balance tags, and fix other problems in the source HTML.
            </summary>
            <param name="sourceStream"> Stream as source of HTML</param>
            <param name="destinationStream">Stream as Normalized HTML</param>
            <param name="inputEncoding">Encoding type of the source stream</param>
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.HtmlEncode(System.String)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in HTML.
             </summary>
             <param name="input">String to be encoded</param>
             <returns>
                 Encoded string for use in HTML.
             </returns>
             <remarks>
             This function will encode all but known safe characters.  Encoded characters are encoded using the &amp;#DECIMAL; notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>,</term><description>Comma</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Space</description></item>
             <item><term> </term><description>Other International character ranges</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSS Attack!');</term><description>alert&#40;&#39;XSS Attack&#33;&#39;&#41;&#59;</description></item>
             <item><term>user@contoso.com</term><description>user&#64;contoso.com</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>Anti-Cross Site Scripting Library</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.HtmlEncode(System.String,System.Drawing.KnownColor)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in HTML.
             </summary>
             <param name="input">String to be encoded</param>
             <param name="clr">String as color like #ffffff</param>
             <returns>
                 Encoded string for use in HTML with DIV and style settings.
             </returns>
             <remarks>
             This function will encode all but known safe characters.  Encoded characters are encoded using the &amp;#DECIMAL; notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>,</term><description>Comma</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Space</description></item>
             <item><term> </term><description>Other International character ranges</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSS Attack!');</term><description><div style='background-color : #ffffff'>alert&#40;&#39;XSS Attack&#33;&#39;&#41;&#59;</div></description></item>
             <item><term>user@contoso.com</term><description>user&#64;contoso.com</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>Anti-Cross Site Scripting Library</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.HtmlAttributeEncode(System.String)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in HTML attributes.
             </summary>
             <param name="input">String to be encoded</param>
             <returns>
                 Encoded string for use in HTML attributes.
             </returns>
             <remarks>
             This function will encode all but known safe characters.  Encoded characters are encoded using the &amp;#DECIMAL; notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>,</term><description>Comma</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Other International character ranges</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSS Attack!');</term><description>alert&#40;&#39;XSS&#32;Attack&#33;&#39;&#41;&#59;</description></item>
             <item><term>user@contoso.com</term><description>user&#64;contoso.com</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>Anti-Cross&#32;Site&#32;Scripting&#32;Library</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.HtmlAttributeEncode(System.String,System.Int32)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in HTML attributes.
             </summary>
             <param name="input">Input string</param>
             <param name="codepage">Codepage number of the input</param>
             <returns>
                 Encoded string with the passed on codepage encoding for use in HTML attributes.
             </returns>
             <remarks>
             This function will encode the output as per the encoding parameter (codepage) passed to it. It will encode all but known safe characters.  Encoded characters are encoded using the %SINGLE_BYTE_HEX and %DOUBLE_BYTE_HEX notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Other International character ranges</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSSあAttack!');</term><description>alert%28%27XSS%82%a0Attack%21%27%29%3b</description></item>
             <item><term>user@contoso.com</term><description>user%40contoso.com</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>Anti-Cross%20Site%20Scripting%20Library</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.UrlEncode(System.String)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in universal resource locators (URLs).
             </summary>
             <param name="input">String to be encoded</param>
             <returns>
                 Encoded string for use in URLs.
             </returns>
             <remarks>
             This function will encode all but known safe characters.  Encoded characters are encoded using the %SINGLE_BYTE_HEX and %uDOUBLE_BYTE_HEX notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Other International character ranges</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSS Attack!');</term><description>alert%28%27XSS%20Attack%21%27%29%3b</description></item>
             <item><term>user@contoso.com</term><description>user%40contoso.com</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>Anti-Cross%20Site%20Scripting%20Library</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.UrlEncode(System.String,System.Int32)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in universal resource locators (URLs).
             </summary>
             <param name="input">Input string</param>
             <param name="codepage">Codepage number of the input</param>
             <returns>
                 Encoded string for use in URLs.
             </returns>
             <remarks>
             This function will encodes the output as per the encoding parameter (codepage) passed to it. It will encode all but known safe characters.  Encoded characters are encoded using the %SINGLE_BYTE_HEX and %DOUBLE_BYTE_HEX notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Other International character ranges</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSSあAttack!');</term><description>alert%28%27XSS%82%a0Attack%21%27%29%3b</description></item>
             <item><term>user@contoso.com</term><description>user%40contoso.com</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>Anti-Cross%20Site%20Scripting%20Library</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.XmlEncode(System.String)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in XML.
             </summary>
             <param name="input">String to be encoded</param>
             <returns>
                 Encoded string for use in XML.
             </returns>
             <remarks>
             This function will encode all but known safe characters.  Encoded characters are encoded using the &amp;#DECIMAL; notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>,</term><description>Comma</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Space</description></item>
             <item><term> </term><description>Other International character ranges</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSS Attack!');</term><description>alert&#40;&#39;XSS Attack&#33;&#39;&#41;&#59;</description></item>
             <item><term>user@contoso.com</term><description>user&#64;contoso.com</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>Anti-Cross Site Scripting Library</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.XmlAttributeEncode(System.String)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in XML attributes.
             </summary>
             <param name="input">String to be encoded</param>
             <returns>
                 Encoded string for use in XML attributes.
             </returns>
             <remarks>
             This function will encode all but known safe characters.  Encoded characters are encoded using the &amp;#DECIMAL; notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>,</term><description>Comma</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Other International character ranges</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSS Attack!');</term><description>alert&#40;&#39;XSS&#32;Attack&#33;&#39;&#41;&#59;</description></item>
             <item><term>user@contoso.com</term><description>user&#64;contoso.com</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>Anti-Cross&#32;Site&#32;Scripting&#32;Library</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.JavaScriptEncode(System.String)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in JavaScript.
             </summary>
             <param name="input">String to be encoded</param>
             <returns>
                 Encoded string for use in JavaScript.
             </returns>
             <remarks>
             This function will encode all but known safe characters.  Encoded characters are encoded using the \xSINGLE_BYTE_HEX and \uDOUBLE_BYTE_HEX notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>,</term><description>Comma</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Space</description></item>
             <item><term> </term><description>Other International character ranges</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSS Attack!');</term><description>'alert\x28\x27XSS Attack\x21\x27\x29\x3b'</description></item>
             <item><term>user@contoso.com</term><description>'user\x40contoso.com'</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>'Anti-Cross Site Scripting Library'</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.InformationSecurity.CISF.AntiXss.VisualBasicScriptEncode(System.String)">
            ---------------------------------------------------------------------
             <summary>
             Encodes input strings for use in Visual Basic Script.
             </summary>
             <param name="input">String to be encoded</param>
             <returns>
                 Encoded string for use in Visual Basic Script.
             </returns>
             <remarks>
             This function will encode all but known safe characters.  Encoded characters are 
             encoded using the &#38;chrw(DECIMAL) notation.
             <newpara/>
             Safe characters include:
             <list type="table">
             <item><term>a-z</term><description>Lower case alphabet</description></item>
             <item><term>A-Z</term><description>Upper case alphabet</description></item>
             <item><term>0-9</term><description>Numbers</description></item>
             <item><term>,</term><description>Comma</description></item>
             <item><term>.</term><description>Period</description></item>
             <item><term>-</term><description>Dash</description></item>
             <item><term>_</term><description>Underscore</description></item>
             <item><term> </term><description>Space</description></item>
             </list>
             <newpara/>
             Example inputs and encoded outputs:
             <list type="table">
             <item><term>alert('XSS Attack!');</term><description>"alert"&#38;chrw(40)&#38;chrw(39)&#38;"XSS Attack"&#38;chrw(33)&#38;chrw(39)&#38;chrw(41)&#38;chrw(59)</description></item>
             <item><term>user@contoso.com</term><description>"user"&#38;chrw(64)&#38;"contoso.com"</description></item>
             <item><term>Anti-Cross Site Scripting Library</term><description>"Anti-Cross Site Scripting Library"</description></item>
             </list></remarks>
            ---------------------------------------------------------------------
        </member>
    </members>
</doc>
