<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnalysisCompleteMessage" xml:space="preserve">
    <value>Selected files have been successfully analyzed, click "Generate" to generate the configuration file.</value>
    <comment>Message of the dialog box displayed after completed analysis of an assembly.</comment>
  </data>
  <data name="AnalysisCompleteTitle" xml:space="preserve">
    <value>Analysis Complete</value>
    <comment>Title of the dialog box displayed after completed analysis of an assembly. </comment>
  </data>
  <data name="AnalysisNotCompletedMessage" xml:space="preserve">
    <value>Configuration file cannot be generated as the assembly analysis not complete. Click "Analysis" button first and then try again.</value>
    <comment>When a user tries to click "Generate" button without analyzing an assembly a dialog box is displayed with this message.</comment>
  </data>
  <data name="AnalysisNotCompletedTitle" xml:space="preserve">
    <value>Analysis not completed</value>
    <comment>When a user tries to click "Generate" button without analyzing an assembly a dialog box is displayed with this title.</comment>
  </data>
  <data name="AnalysisUnknownErrorMessage" xml:space="preserve">
    <value>An unknown error has occured during assembly analysis.</value>
    <comment>Message of the dialog box displayed when an unknown error occurs during analysis of an assembly.</comment>
  </data>
  <data name="btnAnalyze" xml:space="preserve">
    <value>Analyze</value>
    <comment>Text for the "Analyze" button.</comment>
  </data>
  <data name="btnAnalyze_Help" xml:space="preserve">
    <value>Starts the analysis of selected ASP.NET assemblies.</value>
    <comment>Help text for the "Analyze" button.</comment>
  </data>
  <data name="btnBrowse" xml:space="preserve">
    <value>&amp;Browse</value>
    <comment>Text for the "Browse" button.</comment>
  </data>
  <data name="btnBrowse_Help" xml:space="preserve">
    <value>Opens up dialog box to select one or more ASP.NET assemblies for analysis.</value>
    <comment>Help text for the "Browse" button.</comment>
  </data>
  <data name="btnClose" xml:space="preserve">
    <value>Close</value>
    <comment>Text for the "Close" button.</comment>
  </data>
  <data name="btnClose_Help" xml:space="preserve">
    <value>Closes the utility.</value>
    <comment>Help text for the "Close" button.</comment>
  </data>
  <data name="btnGenerate" xml:space="preserve">
    <value>Generate</value>
    <comment>Text for the "Generate" button.</comment>
  </data>
  <data name="btnGenerate_Help" xml:space="preserve">
    <value>Generates the configuration file after the analysis. "Analyze" must be clicked before clicking this button.</value>
    <comment>Help text for the "Generate" button.</comment>
  </data>
  <data name="chkDoubleEncoding" xml:space="preserve">
    <value>Enable Double Encoding Protection</value>
    <comment>Double encoding checkbox text.</comment>
  </data>
  <data name="chkDoubleEncoding_Help" xml:space="preserve">
    <value>Provides double encoding protection for controls where if the control's property is already encoded, SRE will automatically detect and encode the data appropriately.</value>
    <comment>Double encoding checkbox help text.</comment>
  </data>
  <data name="chkEncodeDerivedControls" xml:space="preserve">
    <value>Encode Derived Controls</value>
    <comment>Encode derived controls checkbox text.</comment>
  </data>
  <data name="chkEncodeDerivedControls_Help" xml:space="preserve">
    <value>Encodes controls which are derived from the controls in the configuration. </value>
    <comment>Encode derived controls checkbox help text.</comment>
  </data>
  <data name="chkMarkOutput" xml:space="preserve">
    <value>Mark AntiXss Output (select a color from the dropdown list)</value>
    <comment>Mark AntiXss output check box text.</comment>
  </data>
  <data name="chkMarkOutput_Help" xml:space="preserve">
    <value>Encloses antixss module's output with aditional html element to help users visually distinguish encoded data. DO NOT SELECT THIS OPTION FOR PRODUCTION APPLICATIONS.</value>
    <comment>Mark AntiXss output check box helptext.</comment>
  </data>
  <data name="clmnControl" xml:space="preserve">
    <value>Control Name</value>
    <comment>Listview control's column name used to display control name.</comment>
  </data>
  <data name="clmnControlType" xml:space="preserve">
    <value>Control Type</value>
    <comment>Listview control's column name used to display control type name.</comment>
  </data>
  <data name="clmnPage" xml:space="preserve">
    <value>Page Name</value>
    <comment>Listview control's column name used to display page name.</comment>
  </data>
  <data name="ConfigGenCompleteMessage" xml:space="preserve">
    <value>Configuration file has been successfully generated.</value>
    <comment>Message of the dialog box displayed when configuration file is successfully generated.</comment>
  </data>
  <data name="ConfigGenCompleteTitle" xml:space="preserve">
    <value>Configuration File</value>
    <comment>Title of the dialog box displayed when configuration file is successfully generated.</comment>
  </data>
  <data name="ConfigGenUnknownErrorMessage" xml:space="preserve">
    <value>An unknown error has occured during configuration file generation.</value>
    <comment>Message of the dialog box displayed when an unknown error occurs during configuration file generation.</comment>
  </data>
  <data name="dlgAssemblyTitle" xml:space="preserve">
    <value>Select an ASP.NET assembly</value>
    <comment>Title of the dialog box displayed to select asp.net assembly files for analysis.</comment>
  </data>
  <data name="dlgGenConfigDescription" xml:space="preserve">
    <value>Select a folder to save the configuration file.</value>
    <comment>Description of the dialog box displayed to select a folder to store the configuration file.</comment>
  </data>
  <data name="FileNotFoundExceptionMessage" xml:space="preserve">
    <value>{0} cannot be found in the specified path.</value>
    <comment>Message of the dialog box displayed when a file is not found.</comment>
  </data>
  <data name="FileNotFoundExceptionTitle" xml:space="preserve">
    <value>File not found</value>
    <comment>Title of the dialog box displayed when a file is not found.</comment>
  </data>
  <data name="FileOverwriteMessage" xml:space="preserve">
    <value>Configuration file already exists in the selected folder. Do you want to overwrite the configuration file?</value>
    <comment>Message of the confirmation box displayed when a configuration file already exists in the selected folder.</comment>
  </data>
  <data name="FileOverwriteTitle" xml:space="preserve">
    <value>Overwrite configuration file</value>
    <comment>Title of the confirmation box displayed when a configuration file already exists in the selected folder.</comment>
  </data>
  <data name="frmMain" xml:space="preserve">
    <value>Configuration Generator for SRE</value>
    <comment>Configuration utility title displayed in the title bar.</comment>
  </data>
  <data name="grpAnalysis" xml:space="preserve">
    <value>Analysis</value>
    <comment>Analysis group box text.</comment>
  </data>
  <data name="grpAnalysis_Help" xml:space="preserve">
    <value>Displays the list of controls that need encoding from the selected assemblies.</value>
    <comment>Analysis group box help text.</comment>
  </data>
  <data name="grpOptions" xml:space="preserve">
    <value>Options</value>
    <comment>Options group box text.</comment>
  </data>
  <data name="grpOptions_Help" xml:space="preserve">
    <value>Module options which provide additional functionality. Check individual checkboxes for more information.</value>
    <comment>Options group box help text.</comment>
  </data>
  <data name="lblMainText" xml:space="preserve">
    <value>Browse and select ASP.NET assemblies to generate the configuration file.  Click "Browse" to select an assembly for analysis and click "Analyze" to inspect the assembly for identifying controls that need encoding. Make sure that all the assembly references are in the same folder. Click the Help button in the title bar, then click a control to see a Help tooltip for the control.</value>
    <comment>Main informational label text.</comment>
  </data>
  <data name="lblMainText_Help" xml:space="preserve">
    <value>Displays general information on this utility.</value>
    <comment>Main informational label help text.</comment>
  </data>
  <data name="lblProjectDir" xml:space="preserve">
    <value>ASP.NET Assembly:</value>
    <comment>Assembly Directory label.</comment>
  </data>
  <data name="lblProjectDir_Help" xml:space="preserve">
    <value>ASP.NET assembly</value>
    <comment>Assembly directory label help text.</comment>
  </data>
  <data name="lvwAnalysis_Help" xml:space="preserve">
    <value>Displays the list of controls that need encoding from the selected assemblies.</value>
    <comment>Analysis details list help text</comment>
  </data>
  <data name="NoFileSelectedErrorMessage" xml:space="preserve">
    <value>No File has been selected for analysis, click "Browse" to select assembly file(s).</value>
    <comment>Message of the dialog box displayed when a user clicks "Analyze" button without selecting any file.</comment>
  </data>
  <data name="NoFileSelectedErrorTitle" xml:space="preserve">
    <value>No File Selected</value>
    <comment>Title of the dialog box displayed when a user clicks "Analyze" button without selecting any file.</comment>
  </data>
  <data name="txtAssemblyFile_Help" xml:space="preserve">
    <value>Displays the path of ASP.NET assemblies used in the analysis. You can enter multiple file names separated by a comma or click "Browse" to select assembly files(s).</value>
    <comment>Help text for the text box which displays the selected files.</comment>
  </data>
  <data name="UnknownErrorTitle" xml:space="preserve">
    <value>Unknown error</value>
    <comment>Unknown error message dialog box title.</comment>
  </data>
</root>