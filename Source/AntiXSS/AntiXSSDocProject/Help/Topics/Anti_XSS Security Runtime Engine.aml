<?xml version="1.0" encoding="utf-8"?>
<topic id="c97fadbd-9dd2-433f-b577-dbc499ce9e4b" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This topic provides the introduction to Security Runtime Engine (SRE).</para>
    </introduction>

    <section>
      <!--h1-->
      <title>The Security Runtime Engine (SRE)</title>
      <content>
        <para>
          The Security Runtime Engine (SRE) is an HTTP module that acts like a
          gatekeeper to protect ASP.NET web applications from cross-site scripting
          (XSS) attacks. HTTP modules in ASP.NET work as a chain of processors which
          process data when the modules are registered in the application using
          the web.config
          file. &#160;SRE protects applications from XSS attacks
          by leveraging the Anti-XSS library to proactively encode data. &#160;It
          works by inspecting each control that is being reflected by ASP.NET and
          then automatically encoding data of vulnerable controls in their appropriate
          context. Data being encoded for a specific control is configurable through
          an extensible XML file called antixssmodule.config.
        </para>
        <para>&#160;</para>
        <para>The SRE application provides the following features: </para>
      </content>
    </section>

    <section>
      <!--h3-->
      <title>Encoding of Derived Classes</title>
      <content>
        <para>
          Derived classes whose base classes are configured for encoding are also
          automatically encoded. For example, if the application includes a class
          derived from System.Web.UI.WebControls.Label,
          then its properties should be automatically encoded as the Label class.
        </para>
        <para>&#160;</para>
      </content>
    </section>

    <section>
      <!--h3-->
      <title>Configuration-based Exclusion</title>
      <content>
        <para>
          SRE includes the ability to exclude pages by the virtual path of the
          file as defined in the configuration file. For example, the configuration
          file can specify &lt;Exclude
          Path=”ExcludedPage.aspx” /&gt;.
        </para>
        <para>&#160;</para>
      </content>
    </section>

    <section>
      <!--h3-->
      <title>Encoding of the Suppression Attribute</title>
      <content>
        <para>
          Apart from the above configuration-based exclusion, an attribute exists
          in SRE which allows the user to declaratively mark to be excluded a page
          or field in a page. &#160;This ensures that the user
          is able to suppress encoding for a specified control. Consider the following
          sample implementation code for the attribute:
        </para>
        <para>&#160;</para>
      </content>
    </section>

    <section>
      <!--h3-->
      <title>Class-level context:</title>
      <content>
        <example>
          <code>
  <![CDATA[
  [Microsoft.Security.Application.SecurityRuntimeEngine.SupressAntiXssEncoding()]
    public partial class _Default : System.Web.UI.Page
    {
              
      protected void Page_Load(object sender, EventArgs e)
      {
      
        ...
        
      }
    }]]>
          </code>
        </example>
      </content>
    </section>

    <section>
      <!--h3-->
      <title>Field-level context:</title>
      <content>
        <example>
          <code>
            <![CDATA[
  public partial class _Default : System.Web.UI.Page
    {
      [Microsoft.Security.Application.SecurityRuntimeEngine.SupressAntiXssEncoding()]

      protected global::System.Web.UI.WebControls.Label Label1;
      
      protected void Page_Load(object sender, EventArgs e)
      {
      
        ...
        
      }
    }]]>
          </code>
        </example>
        <para>
          This attribute exists in the AntiXssModule.dll
          file. This attribute can be used on a class or on a field in the class.
          If used in the class, then the entire class will be excluded from encoding.
        </para>
        <para>&#160;</para>
      </content>
    </section>

    <section>
      <!--h3-->
      <title>Automated Configuration Generation</title>
      <content>
        <para>
          SRE includes a utility which reflects off of the target application
          and generates a configuration file. SRE includes an extensible base class
          configuration such that new classes, properties, and encoding contexts
          can be added in the future. It also allows the user to selectively enable/disable
          the above features in the resultant configuration file.
        </para>
        <para>&#160;</para>
      </content>
    </section>

    <section>
      <!--h3-->
      <title>See Also:</title>
      <content>
        <para>
          <link xlink:href="c97fadbd-9dd2-433f-b577-dbc499ce9e4b">Anti-XSS Security Runtime Engine</link>
        </para>
        <para>
          <link xlink:href="3e0cb435-94b3-41ba-b99a-aff0bf3ef4f2">Deploying Security Runtime Engine</link>
        </para>
        <para>
          <link xlink:href="ab2d273c-0d34-48cd-86ea-26749db4ff4f">SRE Configuration Tool</link>
        </para>
        <para>
          <link xlink:href="f4427194-6d84-407f-ab34-5f7d5d9f318f">SRE Configuartion Sample</link>
        </para>
        <para>
          <link xlink:href="f4ea6c72-740b-4efd-bbbf-195a41aa775f">SRE Performance Data Sheet</link>
        </para>
      </content>
    </section>

    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
        
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>

  </developerConceptualDocument>
</topic>