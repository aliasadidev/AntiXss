<?xml version="1.0" encoding="utf-8"?>
<topic id="18e42276-8f31-4d57-9571-6fa9c1f69372" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This topic provides the performance testing results using Microsoft Anti-Cross Site Scripting Library.</para>
    </introduction>

    <section>
      <!--h1-->
      <title>Anti-XSS Performance Data Sheet</title>
      <content>
        <para>
          Performance testing of the Anti-XSS library was carried out for a sample
          application that uses AntiXSSLibrary.dll over a varying user load. Under
          the same load conditions, comparisons of AntiXSSLibrary.dll were done
          using .NET's HttpUtility.HtmlEncode() as well as with no encoding as a
          baseline.
        </para>
        <para>&#160;</para>
        <alert class="note">
          You can use the same AntiXSSLibrary.dll in both 32- and 64-bit installations
        </alert>
      </content>
    </section>

    <section>
      <!--h2-->
      <title>Sample Application Overview</title>
      <content>
        <para>
          The sample ASP.NET application was written to take strings as input and then to output the encoded form of the string using AntiXSSLibrary.dll in the background.
        </para>
        <para>The input string applied on the sample application consisted of </para>

        <list class="bullet">
          <listItem>
            <para>
              64 character string with all safe characters (a-z,A-Z,0-9 etc.)
            </para>
          </listItem>
          <listItem>
            <para>64 character string with approx. 25% of encoding characters</para>
          </listItem>
          <listItem>
            <para>128 character string with approx. 25% of encoding characters</para>
          </listItem>
          <listItem>
            <para>512 character string with approx. 25% of encoding characters</para>
          </listItem>
          <listItem>
            <para>
              1024 &#160;character string with approx. 25% of encoding characters
            </para>
          </listItem>
          <listItem>
            <para>
              64 character international string (any language like Chinese or Hebrew) with no encoded strings
            </para>
          </listItem>
          <listItem>
            <para>
              64 character international string (any language like Chinese or Hebrew) with 25% encoded strings
            </para>
          </listItem>
        </list>
        <para>&#160;</para>
        <alert class="note">
          For obtaining the comparison between AntiXss.HtmlEncode() encoding,
          HttpUtility.HtmlEncode and No encoding, for same sample application, only
          the encoding technique code was modified.
        </alert>
      </content>
    </section>

    <section>
      <!--h2-->
      <title>Performance Environment</title>
      <content>
        <para>
          Performance testing of the Anti-XSS library and SRE were carried out
          in the Microsoft ACE Performance labs. The tests were conducted using
          64-Bit and 32-Bit environments. The following are the machine specifications:
        </para>
        <para>&#160;</para>
        <table>
          <tableHeader>
            <row>
              <entry>
                <para>Machine Specifications</para>
              </entry>
              <entry>
                <para>32-Bit</para>
              </entry>
              <entry>
                <para>64-Bit</para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <para>OS</para>
            </entry>
            <entry>
              <para>Microsoft(R) Windows(R) Server 2003, Enterprise Edition</para>
            </entry>
            <entry>
              <para>Microsoft(R) Windows(R) Server 2003 Enterprise x64 Edition</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Version</para>
            </entry>
            <entry>
              <para>5.2.3790 Service Pack 2 Build 3790</para>
            </entry>
            <entry>
              <para>5.2.3790 Service Pack 2 Build 3790</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Processor (quad core)</para>
            </entry>
            <entry>
              <para>x86 Family 15 Model 5 Stepping 10 Authentic AMD ~2396 MHz</para>
            </entry>
            <entry>
              <para>AMD64 Family 15 Model 5 Stepping 10 Authentic AMD ~2397 MHz</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Total Physical Memory</para>
            </entry>
            <entry>
              <para>32,599.27 MB</para>
            </entry>
            <entry>
              <para>32,599.27 MB</para>
            </entry>
          </row>
        </table>
      </content>
    </section>

    <section>
      <!--h2-->
      <title>Load Test Overview</title>
      <content>
        <para>
          VSTS 2008 was used to generate a load of 200 concurrent users. The following
          table depicts the user load distribution:
        </para>
        <table>
          <tableHeader>
            <row>
              <entry>
                <para>Input Type</para>
              </entry>
              <entry>
                <para>% of users</para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <para>64 character string with all safe characters (a-z,A-Z,0-9 etc.)</para>
            </entry>
            <entry>
              <para>13</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>64 character string with approx. 25% encoding characters</para>
            </entry>
            <entry>
              <para>13</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>128 character string with approx. 25% encoding characters</para>
            </entry>
            <entry>
              <para>12</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>512 character string with approx. 25% encoding characters</para>
            </entry>
            <entry>
              <para>12</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>1024 &#160;character string with approx. 25% encoding characters</para>
            </entry>
            <entry>
              <para>25</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>64 character international string (any language like Chinese or Hebrew) with no encoded strings</para>
            </entry>
            <entry>
              <para>12</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>64 character international string (any language like Chinese or Hebrew) with 25% encoded strings</para>
            </entry>
            <entry>
              <para>13</para>
            </entry>
          </row>
        </table>
        <para>
          Each transaction consisted of two ASP.NET requests. &#160;For this sample application, one transaction comprised:
        </para>
        <para>1. User logs on to the homepage and enters the string </para>
        <para>2. The application returns the encoded version of the string </para>
      </content>
    </section>

    <section>
      <!--h2-->
      <title>Load Test Results</title>
      <content>
        <para>
          For a 200-user concurrent load, the end-to-end transaction time for
          the AntiXss.HtmlEncode() (yellow &quot;Antixss Encode&quot; in the illustration
          below) encoding scenario is 3.9 milliseconds in 32-bit web server and
          4.2 milliseconds in 64-bit web server. Under the same user load conditions,
          the end-to-end transaction time for the scenario using HttpUtility.HtmlEncode()
          (red &quot;Html Encode&quot; in the illustration below) is 3.8 milliseconds
          and 4.1 milliseconds for 32-bit and 64-bit web servers respectively. Hence,
          there is only a 0.1 millisecond delta between encoding with the AntiXss.HtmlEncode()
          and the .NET HttpUtility.HtmlEncode() methods.
        </para>
        <para>&#160;</para>
        <mediaLink>
          <image placement="center" xlink:href="Perf1"/>
        </mediaLink>
        <para>&#160;</para>
        <para>
          In terms of throughput, Anti-XSS generated around 85 ASP.NET Requests/sec
          in the 32-bit environment. Since each transaction consisted of two ASP.NET
          requests, the system throughput at a 200-user concurrent load for the
          Anti-XSS scenario came to 42.5 Requests/sec. &#160;
        </para>
      </content>
    </section>

    <section>
      <!--h3-->
      <title>Performance Test Results</title>
      <content>
        <table>
          <row>
            <entry>
              <para>
                <h2>32-Bit Environment</h2>
              </para>
            </entry>
          </row>
          <tableHeader>
            <row>
              <entry>
                <para>Counters</para>
              </entry>
              <entry>
                <para>No Encoding</para>
              </entry>
              <entry>
                <para>
                  HttpUtility.HtmlEncode()
                </para>
              </entry>
              <entry>
                <para>
                  AntiXss.HtmlEncode()
                </para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <para>Concurrent User Load</para>
            </entry>
            <entry>
              <para>200</para>
            </entry>
            <entry>
              <para>200</para>
            </entry>
            <entry>
              <para>200</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>ASP.NET Requests/Sec</para>
            </entry>
            <entry>
              <para>90</para>
            </entry>
            <entry>
              <para>137</para>
            </entry>
            <entry>
              <para>85</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Transactions/Sec</para>
            </entry>
            <entry>
              <para>44.1</para>
            </entry>
            <entry>
              <para>67.9</para>
            </entry>
            <entry>
              <para>42.2</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Avg. Transaction time (ms)</para>
            </entry>
            <entry>
              <para>3.4</para>
            </entry>
            <entry>
              <para>3.8</para>
            </entry>
            <entry>
              <para>3.9</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>%CPU (Web server)</para>
            </entry>
            <entry>
              <para>10</para>
            </entry>
            <entry>
              <para>10</para>
            </entry>
            <entry>
              <para>8</para>
            </entry>
          </row>
        </table>
        <para>&#160;</para>
        <table>
          <row>
            <entry>
              <para>
                <h2>64-Bit Environment</h2>
              </para>
            </entry>
          </row>
          <tableHeader>
            <row>
              <entry>
                <para>Counters</para>
              </entry>
              <entry>
                <para>No Encoding</para>
              </entry>
              <entry>
                <para>
                  HttpUtility.HtmlEncode()
                </para>
              </entry>
              <entry>
                <para>
                  AntiXss.HtmlEncode()
                </para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <para>Concurrent User Load</para>
            </entry>
            <entry>
              <para>200</para>
            </entry>
            <entry>
              <para>200</para>
            </entry>
            <entry>
              <para>200</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>ASP.NET Requests/Sec</para>
            </entry>
            <entry>
              <para>118</para>
            </entry>
            <entry>
              <para>137</para>
            </entry>
            <entry>
              <para>76</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Transactions/Sec</para>
            </entry>
            <entry>
              <para>57.9</para>
            </entry>
            <entry>
              <para>68.4</para>
            </entry>
            <entry>
              <para>37.3</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Avg. Transaction time (ms)</para>
            </entry>
            <entry>
              <para>3.7</para>
            </entry>
            <entry>
              <para>4.1</para>
            </entry>
            <entry>
              <para>4.2</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>%CPU (Web server)</para>
            </entry>
            <entry>
              <para>7</para>
            </entry>
            <entry>
              <para>7</para>
            </entry>
            <entry>
              <para>4</para>
            </entry>
          </row>
        </table>
      </content>
    </section>

    <section>
      <title>Summary</title>
      <content>
        <list class="bullet">
          <listItem>
            <para>
              The average transaction time for Anti-XSS under given
              conditions was obtained as 3.9 and 4.2 milliseconds on 32-bit and 64-bit
              web servers respectively.
            </para>
          </listItem>
          <listItem>
            <para>
              The average delta between AntiXss.HtmlEncode() and HttpUtility.HtmlEncode()
              is +0.1 milliseconds per transaction.
            </para>
          </listItem>
          <listItem>
            <para>
              On 200 User concurrent loads, the throughput of the
              Anti-XSS library is 42.5 and 38 requests per second on 32-bit and 64-bit
              web servers respectively.
            </para>
          </listItem>
        </list>
      </content>
    </section>
    
    <para>&#160;</para>

    <section>
      <!--h3-->
      <title>See Also:</title>
      <content>
        <para>
          <link xlink:href="039e984c-748f-4241-930c-1d59a2bcc4b8">Introduction</link>
        </para>
        <para>
          <link xlink:href="7a006e82-8045-408f-b80c-628743f2c0ea">How To Use Anti-XSS Library</link>
        </para>
        <para>
          <link xlink:href="da9ed57c-53d1-45f1-812e-397f2d691bb7">MarkAntiXSSOutput Feature</link>
        </para>
        <para>
          <link xlink:href="9e14bafd-de75-498d-aeda-1cf3b9816bc6">The White List</link>
        </para>
        <para>&#160;</para>
      </content>
    </section>

    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
        
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>

  </developerConceptualDocument>
</topic>