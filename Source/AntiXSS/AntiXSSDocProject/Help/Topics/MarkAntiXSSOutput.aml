<?xml version="1.0" encoding="utf-8"?>
<topic id="da9ed57c-53d1-45f1-812e-397f2d691bb7" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>This topic describes the MarkAntiXssOutput feature of Microsoft Anti-Cross Site Scripting Library.</para>
    </introduction>

    <section>
      <title>MarkAntiXSSOutput Feature</title>
      <content>
        <para>
          MarkAntiXSSOutput is a switch which works with the AntiXss.HtmlEncode() method to cause those lines in your output which are being encoded to be highlighted. It does so by embedding your output within <span /> tags, applying the color parameter as a style attribute.  That way you can visually distinguish between "normal" output and Anti-XSS-encoded output.
        </para>
        <para>
          This feature allow users to visually distinguish between the normal output and Anti-XSS encoded output. It helps developers and testers to exactly know which parts of the page are being encoded.
        </para>
        <para>
          MarkAntiXSSOutput feature is only supported for HtmlEncode method.
        </para>
        <para>
          <codeExample>
            <code>public static String AntiXss.HtmlEncode(string input, KnownColor clr)</code>
          </codeExample>
        </para>
      </content>
    </section>
    <para>&#160;</para>
    <section>
      <title>Steps</title>
      <content>
        <para>Using this feature in the ASP.NET Web application includes following two steps:</para>
        <procedure>
          <steps class="ordered">
            <step>
              <content>
                <para>
                  You include the overloaded method in your source code.
                </para>
                <para>Example:</para>
                <para>
                  AntiXss.HtmlEncode(request.QueryString["location"],System.Drawing.KnownColor.Yellow)
                </para>
              </content>
            </step>
            <step>
              <content>
                <para>
                  You invoke MarkAntiXSSOutput by passing it as a parameter in a url.
                </para>
                <para>Example:</para>
                <para>
                  http://www.foosite.com/default.aspx?MarkAntiXSSOutput=true
                </para>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>

    <section>
      <!--h3-->
      <title>See Also:</title>
      <content>
        <para>
          <link xlink:href="039e984c-748f-4241-930c-1d59a2bcc4b8">Introduction</link>
        </para>
        <para>
          <link xlink:href="7a006e82-8045-408f-b80c-628743f2c0ea">How To Use Anti-XSS Library</link>
        </para>
        <para>
          <link xlink:href="9e14bafd-de75-498d-aeda-1cf3b9816bc6">The White List</link>
        </para>
        <para>
          <link xlink:href="18e42276-8f31-4d57-9571-6fa9c1f69372">Performance Data Sheet</link>
        </para>
        <para>&#160;</para>
      </content>
    </section>

    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
        
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>

  </developerConceptualDocument>
</topic>